/* -*- c++ -*- */
/*
 * Copyright 2022 Lukasz Wiecaszek <lukasz.wiecaszek@gmail.com>.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdlib.h>
#include <time.h>
#include <chrono>

#include <gnuradio/io_signature.h>
#include "geojson_file_sink_impl.h"
#include "vector3d.h"

namespace gr {
  namespace gnss {

    static void on_exit_handler(int code, void *arg)
    {
      FILE *fp = (FILE*)arg;

      if (fp) {
        fprintf(fp, "\n");
        fprintf(fp, "    ]\n");
        fprintf(fp, "  }\n");
        fprintf(fp, "}\n");

        fclose(fp);
      }
    }

    geojson_file_sink::sptr
    geojson_file_sink::make(const char *filename)
    {
      return gnuradio::get_initial_sptr
        (new geojson_file_sink_impl<vector3d>(filename));
    }

    template<typename ITYPE>
    geojson_file_sink_impl<ITYPE>::geojson_file_sink_impl(const char *filename)
      : gr::sync_block("geojson_file_sink",
                       gr::io_signature::make(1, 1, sizeof(ITYPE) * IVLEN),
                       gr::io_signature::make(0, 0, 0)),
      d_fp{NULL},
      d_line_cnt{0UL}
    {
      if (filename && *filename && strcmp(filename, "default")) {
        d_fp = fopen(filename, "w");
      } else {
        struct tm tm;
        char date_time_buf[128] = {};
        char date_time_filename_buf[256];

        auto current_time = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
        if (::gmtime_r(&current_time, &tm))
          ::strftime(date_time_buf, sizeof(date_time_buf), "%F_%H%M%S", &tm);

        snprintf(date_time_filename_buf, sizeof(date_time_filename_buf), "%s_positions.geojson", date_time_buf);

        d_fp = fopen(date_time_filename_buf, "w");
      }

      if (d_fp) {
        fprintf(d_fp, "{\n");
        fprintf(d_fp, "  \"type\": \"Feature\",\n");
        fprintf(d_fp, "  \"properties\": {\n");
        fprintf(d_fp, "    \"name\": \"Positions generated by gr-gnss module\"\n");
        fprintf(d_fp, "  },\n");
        fprintf(d_fp, "  \"geometry\": {\n");
        fprintf(d_fp, "    \"type\": \"MultiPoint\",\n");
        fprintf(d_fp, "    \"coordinates\": [\n");
      }

      on_exit(on_exit_handler, d_fp);
    }

    template<typename ITYPE>
    geojson_file_sink_impl<ITYPE>::~geojson_file_sink_impl()
    {
    }

    template<typename ITYPE>
    int
    geojson_file_sink_impl<ITYPE>::work(int noutput_items,
        gr_vector_const_void_star &input_items,
        gr_vector_void_star &output_items)
    {
      const ITYPE* iptr0 = (const ITYPE*) input_items[0];

      for (int n = 0; n < noutput_items; ++n) {
        if (d_line_cnt++)
          fprintf(d_fp, ",\n");
        fprintf(d_fp, "      [%.15f, %.15f, %.15f]",
          iptr0[n].get({1}, {}), iptr0[n].get({0}, {}), iptr0[n].get({2}, {}));
      }

      // Tell runtime system how many output items we produced.
      return noutput_items;
    }

  } /* namespace gnss */
} /* namespace gr */

