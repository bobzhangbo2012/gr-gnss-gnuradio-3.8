id: gnss_ca_code_generator
label: ca_code_generator
category: '[gnss]'

templates:
  imports: import gnss
  make: gnss.ca_code_generator_${type.suffix}(${svid}, ${sampling_freq}, ${domain})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: type
  label: Output Type
  dtype: enum
  options: [byte, short, int, float, complex]
  option_attributes:
    suffix: [b, s, i, f, c]
  hide: part
- id: svid
  label: SVID
  dtype: int
- id: sampling_freq
  label: Sample Rate
  dtype: real
  default: '1023000'
- id: domain
  label: Domain
  dtype: enum
  options: [gnss.CA_CODE_DOMAIN_TIME, gnss.CA_CODE_DOMAIN_FREQUENCY]
  option_labels: [time, frequency]
  default: gnss.CA_CODE_DOMAIN_TIME

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- optional: true

outputs:
- label: out
  dtype: ${type}
  vlen: 1

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
